import { NotionServices } from '../notion/services';
import { AICommand } from '../types';
import { NLPResult } from './processor';

/**
 * Interface para resultado de execu√ß√£o de comando
 */
export interface CommandResult {
  success: boolean;
  message: string;
  data?: any;
  error?: string;
}

/**
 * Classe para execu√ß√£o de comandos extra√≠dos do NLP
 */
export class CommandExecutor {
  private notionServices: NotionServices;

  constructor(notionServices: NotionServices) {
    this.notionServices = notionServices;
  }

  /**
   * Executa comando baseado no resultado do NLP
   */
  async executeCommand(nlpResult: NLPResult): Promise<CommandResult> {
    try {
      if (!nlpResult.command) {
        return {
          success: true,
          message: nlpResult.response || 'Como posso ajudar voc√™?'
        };
      }

      const { command, parameters } = nlpResult;
      
      switch (command.action) {
        case 'create_task':
          return await this.createTask(parameters);
        
        case 'update_task':
          return await this.updateTask(parameters);
        
        case 'complete_task':
          return await this.completeTask(parameters);
        
        case 'list_tasks':
          return await this.listTasks(parameters);
        
        case 'create_note':
          return await this.createNote(parameters);
        
        case 'search_notes':
          return await this.searchNotes(parameters);
        
        case 'create_project':
          return await this.createProject(parameters);
        
        case 'get_summary':
          return await this.getDashboard();
        
        case 'get_stats':
          return await this.getAnalytics(parameters);
        
        default:
          return {
            success: false,
            message: 'Comando n√£o reconhecido.',
            error: `A√ß√£o '${command.action}' n√£o implementada`
          };
      }
    } catch (error) {
      console.error('Erro na execu√ß√£o do comando:', error);
      return {
        success: false,
        message: 'Ocorreu um erro ao executar o comando.',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Cria nova tarefa
   */
  private async createTask(params: any): Promise<CommandResult> {
    try {
      const taskData = {
        title: params.title || 'Nova tarefa',
        description: params.description,
        priority: params.priority || 'M√©dia',
        status: 'A fazer',
        dueDate: params.dueDate,
        tags: params.tags || []
      };

      const task = await this.notionServices.createTask(taskData);
      
      return {
        success: true,
        message: `‚úÖ Tarefa "${task.title}" criada com sucesso!`,
        data: task
      };
    } catch (error) {
      return {
        success: false,
        message: 'N√£o foi poss√≠vel criar a tarefa.',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Atualiza tarefa existente
   */
  private async updateTask(params: any): Promise<CommandResult> {
    try {
      if (!params.taskId && !params.title) {
        return {
          success: false,
          message: '√â necess√°rio especificar qual tarefa atualizar.',
          error: 'ID ou t√≠tulo da tarefa n√£o fornecido'
        };
      }

      // Se n√£o temos ID, tentar encontrar por t√≠tulo
      let taskId = params.taskId;
      if (!taskId && params.title) {
        const tasks = await this.notionServices.searchTasks({ title: params.title });
        if (tasks.length === 0) {
          return {
            success: false,
            message: `Tarefa "${params.title}" n√£o encontrada.`,
            error: 'Tarefa n√£o encontrada'
          };
        }
        taskId = tasks[0].id;
      }

      const updatedTask = await this.notionServices.updateTask(taskId, params.updates);
      
      return {
        success: true,
        message: `‚úÖ Tarefa "${updatedTask.title}" atualizada com sucesso!`,
        data: updatedTask
      };
    } catch (error) {
      return {
        success: false,
        message: 'N√£o foi poss√≠vel atualizar a tarefa.',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Marca tarefa como conclu√≠da
   */
  private async completeTask(params: any): Promise<CommandResult> {
    try {
      if (!params.taskId && !params.title) {
        return {
          success: false,
          message: '√â necess√°rio especificar qual tarefa completar.',
          error: 'ID ou t√≠tulo da tarefa n√£o fornecido'
        };
      }

      // Se n√£o temos ID, tentar encontrar por t√≠tulo
      let taskId = params.taskId;
      if (!taskId && params.title) {
        const tasks = await this.notionServices.searchTasks({ title: params.title });
        if (tasks.length === 0) {
          return {
            success: false,
            message: `Tarefa "${params.title}" n√£o encontrada.`,
            error: 'Tarefa n√£o encontrada'
          };
        }
        taskId = tasks[0].id;
      }

      const completedTask = await this.notionServices.completeTask(taskId);
      
      return {
        success: true,
        message: `üéâ Tarefa "${completedTask.title}" marcada como conclu√≠da!`,
        data: completedTask
      };
    } catch (error) {
      return {
        success: false,
        message: 'N√£o foi poss√≠vel completar a tarefa.',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Lista tarefas com filtros
   */
  private async listTasks(params: any): Promise<CommandResult> {
    try {
      const filters = {
        status: params.status,
        priority: params.priority,
        project: params.project
      };

      // Remover filtros vazios
      Object.keys(filters).forEach(key => {
        if (!filters[key as keyof typeof filters]) {
          delete filters[key as keyof typeof filters];
        }
      });

      const tasks = await this.notionServices.searchTasks(filters);
      
      if (tasks.length === 0) {
        return {
          success: true,
          message: 'Nenhuma tarefa encontrada com os filtros especificados.',
          data: []
        };
      }

      // Limitar n√∫mero de resultados
      const limitedTasks = tasks.slice(0, params.limit || 10);
      
      const taskList = limitedTasks.map((task, index) => 
        `${index + 1}. ${task.title} (${task.status}) - ${task.priority}`
      ).join('\n');

      return {
        success: true,
        message: `üìã Encontrei ${tasks.length} tarefa(s):\n\n${taskList}`,
        data: limitedTasks
      };
    } catch (error) {
      return {
        success: false,
        message: 'N√£o foi poss√≠vel listar as tarefas.',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Cria nova nota
   */
  private async createNote(params: any): Promise<CommandResult> {
    try {
      const noteData = {
        title: params.title || 'Nova nota',
        content: params.content || '',
        tags: params.tags || []
      };

      const note = await this.notionServices.createNote(noteData);
      
      return {
        success: true,
        message: `üìù Nota "${note.title}" criada com sucesso!`,
        data: note
      };
    } catch (error) {
      return {
        success: false,
        message: 'N√£o foi poss√≠vel criar a nota.',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Busca notas
   */
  private async searchNotes(params: any): Promise<CommandResult> {
    try {
      const filters = {
        query: params.query,
        tags: params.tags
      };

      const notes = await this.notionServices.searchNotes(filters);
      
      if (notes.length === 0) {
        return {
          success: true,
          message: 'Nenhuma nota encontrada com os crit√©rios especificados.',
          data: []
        };
      }

      const noteList = notes.slice(0, 10).map((note, index) => 
        `${index + 1}. ${note.title}${note.tags.length > 0 ? ` [${note.tags.join(', ')}]` : ''}`
      ).join('\n');

      return {
        success: true,
        message: `üìö Encontrei ${notes.length} nota(s):\n\n${noteList}`,
        data: notes
      };
    } catch (error) {
      return {
        success: false,
        message: 'N√£o foi poss√≠vel buscar as notas.',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Cria novo projeto
   */
  private async createProject(params: any): Promise<CommandResult> {
    try {
      const projectData = {
        name: params.name || 'Novo projeto',
        description: params.description,
        status: params.status || 'Ativo'
      };

      const project = await this.notionServices.createProject(projectData);
      
      return {
        success: true,
        message: `üöÄ Projeto "${project.name}" criado com sucesso!`,
        data: project
      };
    } catch (error) {
      return {
        success: false,
        message: 'N√£o foi poss√≠vel criar o projeto.',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Obt√©m dashboard/resumo
   */
  private async getDashboard(): Promise<CommandResult> {
    try {
      const summary = await this.notionServices.getDashboardSummary();
      
      const message = `üìä **Dashboard - Resumo**\n\n` +
        `üìã **Tarefas:**\n` +
        `‚Ä¢ A fazer: ${summary.tasks.todo}\n` +
        `‚Ä¢ Em progresso: ${summary.tasks.inProgress}\n` +
        `‚Ä¢ Conclu√≠das: ${summary.tasks.completed}\n\n` +
        `üìù **Notas:** ${summary.notes.total}\n` +
        `üöÄ **Projetos ativos:** ${summary.projects.active}\n\n` +
        `‚ö° **Produtividade hoje:** ${summary.productivity.tasksCompletedToday} tarefas conclu√≠das`;

      return {
        success: true,
        message,
        data: summary
      };
    } catch (error) {
      return {
        success: false,
        message: 'N√£o foi poss√≠vel obter o dashboard.',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }

  /**
   * Obt√©m estat√≠sticas/analytics
   */
  private async getAnalytics(params: any): Promise<CommandResult> {
    try {
      const period = params.period || 'week';
      const stats = await this.notionServices.getProductivityStats(period);
      
      const message = `üìà **Estat√≠sticas (${period})**\n\n` +
        `‚úÖ **Tarefas conclu√≠das:** ${stats.tasksCompleted}\n` +
        `üìù **Notas criadas:** ${stats.notesCreated}\n` +
        `‚è±Ô∏è **Tempo m√©dio por tarefa:** ${stats.averageCompletionTime}\n` +
        `üéØ **Taxa de conclus√£o:** ${stats.completionRate}%\n` +
        `üî• **Sequ√™ncia atual:** ${stats.currentStreak} dias`;

      return {
        success: true,
        message,
        data: stats
      };
    } catch (error) {
      return {
        success: false,
        message: 'N√£o foi poss√≠vel obter as estat√≠sticas.',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      };
    }
  }
}

/**
 * Classe para gerenciar templates de resposta
 */
export class ResponseTemplates {
  /**
   * Gera resposta de ajuda
   */
  static getHelpMessage(): string {
    return `ü§ñ **Alfred - Assistente de Produtividade**\n\n` +
      `Aqui est√£o algumas coisas que posso fazer por voc√™:\n\n` +
      `üìã **Tarefas:**\n` +
      `‚Ä¢ "Criar tarefa: Revisar relat√≥rio"\n` +
      `‚Ä¢ "Marcar como conclu√≠da: Reuni√£o com cliente"\n` +
      `‚Ä¢ "Listar tarefas pendentes"\n` +
      `‚Ä¢ "Tarefas de alta prioridade"\n\n` +
      `üìù **Notas:**\n` +
      `‚Ä¢ "Criar nota sobre reuni√£o"\n` +
      `‚Ä¢ "Buscar notas sobre projeto X"\n\n` +
      `üöÄ **Projetos:**\n` +
      `‚Ä¢ "Criar projeto: Website da empresa"\n` +
      `‚Ä¢ "Projetos ativos"\n\n` +
      `üìä **An√°lises:**\n` +
      `‚Ä¢ "Mostrar dashboard"\n` +
      `‚Ä¢ "Estat√≠sticas da semana"\n\n` +
      `Digite sua solicita√ß√£o em linguagem natural e eu cuidarei do resto! üòä`;
  }

  /**
   * Gera resposta de boas-vindas
   */
  static getWelcomeMessage(): string {
    return `üëã Ol√°! Eu sou o Alfred, seu assistente de produtividade.\n\n` +
      `Estou aqui para ajudar voc√™ a gerenciar suas tarefas, notas e projetos no Notion.\n` +
      `Digite "ajuda" para ver o que posso fazer ou comece fazendo uma solicita√ß√£o!`;
  }

  /**
   * Gera resposta de erro amig√°vel
   */
  static getErrorMessage(error?: string): string {
    const baseMessage = `üòÖ Ops! Algo deu errado.\n\n`;
    
    if (error) {
      return baseMessage + `Detalhes: ${error}\n\nTente novamente ou digite "ajuda" para ver o que posso fazer.`;
    }
    
    return baseMessage + `Tente reformular sua solicita√ß√£o ou digite "ajuda" para ver exemplos.`;
  }
}